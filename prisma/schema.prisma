// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  role      Role
  createdAt DateTime  @default(now())

  interactions GPTInteraction[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())

  phases        ProjectPhase[]
  interactions  GPTInteraction[]
  documents     Document[]
  reports       ReportsAndSuggestions[]
}

model ProjectPhase {
  id                Int       @id @default(autoincrement())
  projectId         Int
  phaseName         PhaseName
  phaseDescription  String?
  startDate         DateTime
  endDate           DateTime?
  createdAt         DateTime  @default(now())

  project       Project   @relation(fields: [projectId], references: [id])
  interactions  GPTInteraction[]
  documents     Document[]
  reports       ReportsAndSuggestions[]
}

model GPTInteraction {
  id              Int      @id @default(autoincrement())
  userId          Int
  projectId       Int
  phaseId         Int
  userQuestion    String
  gptResponse     String
  interactionDate DateTime @default(now())

  user      User          @relation(fields: [userId], references: [id])
  project   Project       @relation(fields: [projectId], references: [id])
  phase     ProjectPhase  @relation(fields: [phaseId], references: [id])
}

model Document {
  id              Int      @id @default(autoincrement())
  projectId       Int
  phaseId         Int
  documentType    DocumentType
  documentContent String
  createdAt       DateTime @default(now())

  project Project       @relation(fields: [projectId], references: [id])
  phase   ProjectPhase  @relation(fields: [phaseId], references: [id])
}

model ReportsAndSuggestions {
  id                  Int      @id @default(autoincrement())
  projectId           Int
  phaseId             Int
  gptSummary          String
  gptRecommendations  String
  reportDate          DateTime @default(now())

  project Project       @relation(fields: [projectId], references: [id])
  phase   ProjectPhase  @relation(fields: [phaseId], references: [id])
}

enum DocumentType {
  REQUIREMENTS
  ARCHITECTURE
  TECHNICAL_DOC
  CODE
  TEST_CASE
  REPORT
}

enum PhaseName {
  REQUIREMENTS
  ARCHITECTURE
  DOCUMENTATION
  CODING
  TESTING
  REPORTING
}

enum Role {
  DEVELOPER
  ANALYST
  TESTER
  ARCHITECT
  MANAGER
}
